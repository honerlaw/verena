// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())

  // clerk id
  authId    String   @unique

  connections Connection[]
  transactions Transaction[]

  sessionToken SessionToken?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ConnectionStatus {
  INITIALIZING // after the connection is created
  SYNCED_INITIAL // after the initial sync is complete
  SYNCED_HISTORICAL // after the historical sync is complete
  ENRICHED // profile.ready event that is called after enrichment
  RECONNECT // need user to do reconnect flow
  DISCONNECTED // connection was disconnected
  INSTITUTION_ERROR // problem with the institution itself
}

model Connection {
  id        String   @id @default(uuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  quilttConnectionId String @unique

  status ConnectionStatus @default(INITIALIZING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaction {
  id String @id @default(uuid())

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  quilttTransactionId String @unique
  transaction Json // the JSON payload from quiltt

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SessionToken {
  id String @id @default(uuid())

  userId String @unique
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  token String
  expiresAt DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}